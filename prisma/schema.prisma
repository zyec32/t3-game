// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    // Связь с Player
    games Player[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Card {
    id              Int        @id @default(autoincrement())
    name            String
    image           String?
    backgroundColor String
    pattern         String
    patternColor    String
    secondaryColor  String
    tertiaryColor   String
    GameCard        GameCard[]
}

model Game {
    id          Int        @id @default(autoincrement())
    playerCount Int
    isActibe    Boolean    @default(true)
    players     Player[]
    cards       GameCard[]
}

model Player {
    id                 Int @id @default(autoincrement())
    userId             String
    gameId             Int
    revealedCardsCount Int @default(0)
    timesRevealed      Int @default(0)

    // Связь с User и Game
    user     User       @relation(fields: [userId], references: [id])
    game     Game       @relation(fields: [gameId], references: [id])
    // Добавление обратных связей
    issuedCards        GameCard[] @relation("IssuedPlayer")
    revealedCards      GameCard[] @relation("RevealedPlayer")

    @@unique([userId, gameId])
}

model GameCard {
    id          Int            @id @default(autoincrement())
    gameId      Int
    cardId      Int
    // status      CardStatusEnum @default(FREE)
    status      String @default("FREE")
    playerId    Int? // Связанный игрок, если карта выдана
    revealerId  Int? // Игрок, который раскрыл карту
    xCoordinate Int? // Координата X на поле
    yCoordinate Int? // Координата Y на поле

    // Связь с Game, Card, Player (игрок, которому выдана карта), Revealer (игрок, который раскрыл карту)
    game     Game    @relation(fields: [gameId], references: [id])
    card     Card    @relation(fields: [cardId], references: [id])
    player   Player? @relation("IssuedPlayer", fields: [playerId], references: [id])
    revealer Player? @relation("RevealedPlayer", fields: [revealerId], references: [id])

    @@unique([gameId, cardId])
}

// enum CardStatusEnum {
//     FREE
//     ISSUED
//     REVEALED
// }
